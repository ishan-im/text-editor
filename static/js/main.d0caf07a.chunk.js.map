{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","class","onClick","toggleMode","htmlFor","modetext","Textform","useState","text","setText","btnText","setBtnText","textAreaRef","useRef","style","color","heading","onChange","event","target","value","ref","rows","backgroundColor","newText","toLocaleUpperCase","showAlert","toLocaleLowerCase","e","current","select","document","execCommand","focus","split","length","defaultProps","aboutUs","Alert","alert","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","App","setMode","setModeText","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d0caf07a.chunk.js","sourcesContent":["import React from 'react'\r\n import PropTypes from 'prop-types'\r\nimport { a } from 'react-router-dom' \r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`} >\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n    <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li class=\"nav-item\">\r\n          <a class=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n        </li>\r\n\r\n        \r\n\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-a\" href=\"/about\">{props.aboutUs}</a>\r\n        </li> */}\r\n        \r\n       \r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'} my-1 mx-2`}>\r\n  <input className=\"form-check-input \"  onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label \" htmlFor=\"flexSwitchCheckDefault\">{props.modetext}</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={title:PropTypes.string.isRequired, aboutUs:PropTypes.string.isRequired}\r\n\r\nNavbar.defaultProps={title:\"Stranger\", aboutUs:\"My app\"}\r\n\r\n\r\n","        import React, {useRef, useState } from \"react\"\r\n\r\n\r\n\r\n        export default function Textform(props) {\r\n            \r\n            // text update\r\n            const [text, setText] = useState(\"\");\r\n\r\n            const handleUpClick=() =>{\r\n            \r\n                let newText = text.toLocaleUpperCase(); \r\n                setText(newText);\r\n                props.showAlert('Converted to upper case','success');\r\n            }\r\n\r\n            const handleLowClick = () =>{\r\n                let newText = text.toLocaleLowerCase(); \r\n                setText(newText);\r\n                props.showAlert('Converted to lower case','success');\r\n            }\r\n\r\n            const handleClearText = () =>{\r\n                let newText = ''; \r\n                setText(newText);\r\n                props.showAlert('textform cleared','success');\r\n            }  \r\n\r\n            \r\n        \r\n\r\n            const handleOnChange=(event) =>{\r\n                \r\n                setText(event.target.value);\r\n            }\r\n\r\n            \r\n            // button text change\r\n\r\n            const [btnText, setBtnText] = useState(\"Copy Text\");\r\n            const textAreaRef = useRef(null) \r\n\r\n            const copyToClipBoard = (e) =>{\r\n\r\n              textAreaRef.current.select();\r\n               document.execCommand('copy');\r\n            // This is just personal preference.\r\n            // I prefer to not show the whole text area selected.\r\n              e.target.focus();\r\n                setBtnText('Copy Text');\r\n                props.showAlert('Copied!','success');\r\n            }\r\n            \r\n        \r\n            \r\n            \r\n\r\n            return (\r\n                <>\r\n                <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <div className=\"mb-3 \">\r\n        <h1 >{props.heading}</h1>\r\n        <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" onChange={handleOnChange} value={text} ref={textAreaRef}\r\n        rows=\"6\" style={{backgroundColor:props.mode==='dark'?'gray':'white' , color:props.mode==='dark'?'white':'black' }}></textarea>\r\n        </div > \r\n\r\n        <button className=\"btn btn-primary \"  onClick={handleUpClick}>Convert to upperCase</button>\r\n        <button className=\"btn btn-primary mx-2\"  onClick={handleLowClick}>Convert to lowerCase</button>\r\n        <button className=\"btn btn-primary mx-2\"  onClick={copyToClipBoard} >{btnText}</button>\r\n        <button className=\"btn btn-primary mx-2\"  onClick={handleClearText}>Clear Text</button>\r\n                </div>\r\n        <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n            <h1>Your Text Summary</h1>\r\n            <p>{text.split(\" \").length - 1} Words {text.length} Characters</p>\r\n            <p>{(0.008*text.split(\" \").length)} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:'Enter Some Text to Preview'}</p>\r\n        </div>\r\n\r\n\r\n\r\n\r\n                </>\r\n            )\r\n        }\r\n\r\n\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  \r\n  const capitalize = (word) =>{\r\n     const lower = word.toLowerCase();\r\n\r\n     return lower.charAt(0).toUpperCase() + lower.slice(1) ;\r\n  }\r\n\r\n    return (\r\n       props.alert && <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n       <strong>{ capitalize(props.alert.type)}:</strong> {props.alert.msg}\r\n        \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n  \n// } from \"react-router-dom\";\n\nfunction App() {\n\nconst [mode, setMode] = useState('light');\nconst [modetext, setModeText] = useState('Enable Dark Mode');\n\nconst [alert, setAlert] = useState(null);\n\nconst showAlert = (message ,  type) => {\n \nsetAlert({\n  msg:message,\n  type:type\n});\n\nsetTimeout(() => {\n  setAlert(null);\n}, 1000);\n\n}\n\n const toggleMode = () =>{\n\nif(mode ==='dark'){\n  setMode('light');\n  document.body.style.backgroundColor='white';\n  setModeText('Enable Dark Mode');\n  showAlert('Light mode has been enabled','success');\n  document.title=\"My App-Light mode\"\n\n}else{\n  setMode('dark');\n  document.body.style.backgroundColor='#121212';\n  setModeText('Enable Light Mode');\n  showAlert('Dark mode has been enabled','success');\n  document.title=\"My App-Dark mode\"\n}\n}\n\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"My App\" aboutUs=\"About App\" mode={mode} modetext={modetext} toggleMode={toggleMode}/>\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n        {/* <Switch>\n          <Route exact path=\"/about\">\n          <About />\n          </Route>\n\n          <Route exact path=\"/\"> */}\n          <Textform showAlert={showAlert}  heading='Enter your text here' mode={mode}/> \n          {/* </Route>\n        </Switch> */}\n    \n     </div> \n     {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}